import os, json, yaml
from typing import Dict, Any, Optional, List

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, PlainTextResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)
import httpx

# ========= ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "hook")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞/—é–∑–µ—Ä–∞, –∫—É–¥–∞ –ø–∞–¥—ë—Ç –±—Ä–∏—Ñ
AUTO_ZOHO = False  # Zoho –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî —Å–¥–µ–ª–∞–µ–º –ø–æ–∑–∂–µ

# ========= LOAD QUESTIONS (ONLY ECOMMERCE) =========
with open("questions.yaml", "r", encoding="utf-8") as f:
    Q = yaml.safe_load(f)["ecommerce"]

# ========= STATE (in-memory) =========
# –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: sess["editing"] = qid | None
SESSIONS: Dict[int, Dict[str, Any]] = {}

# ========= FASTAPI =========
app = FastAPI()
TG_APP = None  # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ BOT_TOKEN –≤–∞–ª–∏–¥–µ–Ω

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/")
def root():
    return PlainTextResponse("E-commerce TZ Bot is running.")

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∞—Ä—Ç: –Ω–µ –≤–∞–ª–∏–º —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω/–±–∏—Ç—ã–π
@app.on_event("startup")
async def startup():
    global TG_APP
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("WARNING: BOT_TOKEN is not set. Telegram handlers NOT initialized yet.")
        TG_APP = None
        return
    try:
        TG_APP = ApplicationBuilder().token(token).build()
        TG_APP.add_handler(CommandHandler("start", start))
        TG_APP.add_handler(CommandHandler("setwebhook", setwebhook))
        TG_APP.add_handler(CallbackQueryHandler(on_callback))
        TG_APP.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
        await TG_APP.initialize()
        print("Telegram app initialized.")
    except Exception as e:
        print(f"ERROR: Telegram init failed: {e}")
        TG_APP = None  # –¥–∞—ë–º FastAPI –ø–æ–¥–Ω—è—Ç—å—Å—è, healthcheck –ø—Ä–æ–π–¥—ë—Ç

@app.post(f"/telegram/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    if TG_APP is None:
        return JSONResponse({"ok": False, "error": "Bot not initialized"}, status_code=503)
    data = await request.json()
    update = Update.de_json(data, TG_APP.bot)
    await TG_APP.process_update(update)
    return JSONResponse({"ok": True})

# ========= HELPERS =========
def kb_options(options: List[str], multi: bool, qid: str):
    rows, row = [], []
    for i, opt in enumerate(options):
        row.append(InlineKeyboardButton(opt, callback_data=f"opt:{qid}:{i}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    if multi:
        rows.append([InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"next:{qid}")])
    return InlineKeyboardMarkup(rows)

def kb_confirm_and_edit(sess: Dict[str, Any]):
    """–í–Ω–∏–∑—É —Å–≤–æ–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å + –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    edit_rows, row = [], []
    for q in Q["questions"]:
        label = q["text"].split(" ")[0]  # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π —Å–º–∞–π–ª–∏–∫ –∫–∞–∫ —è—Ä–ª—ã–∫
        btn = InlineKeyboardButton(f"‚úèÔ∏è {label}", callback_data=f"edit:{q['id']}")
        row.append(btn)
        if len(row) == 2:
            edit_rows.append(row); row = []
    if row: edit_rows.append(row)
    edit_rows.append([
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes"),
        InlineKeyboardButton("‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm:reset"),
    ])
    return InlineKeyboardMarkup(edit_rows)

def format_summary_user(data: Dict[str, Any]) -> str:
    """–°–≤–æ–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ + —ç–º–æ–¥–∑–∏."""
    lines = [f"üêæ –ü—Ä–æ–≤–µ—Ä–∏–º –∏ –¥–æ–≤–µ–¥—ë–º –¥–æ –∏–¥–µ–∞–ª–∞! \n\n*–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:* {Q['title']}"]
    for q in Q["questions"]:
        qid = q["id"]
        val = data["answers"].get(qid)
        if val is None: continue
        if isinstance(val, list):
            val = ", ".join(map(str, val))
        # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        label_emoji = q["text"].split(" ")[0]
        pretty_label = q["text"]
        lines.append(f"{label_emoji} *{pretty_label}* \n‚Äî _{val}_")
    return "\n\n".join(lines)

def format_summary_admin(data: Dict[str, Any]) -> str:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è, —á–∏—Ç–∞–±–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞."""
    a = data["answers"]
    def get(id): 
        v = a.get(id)
        return ", ".join(v) if isinstance(v, list) else (v or "‚Äî")
    return (
        "üêæ *–ù–æ–≤—ã–π e-commerce –ø—Ä–æ–µ–∫—Ç!*\n\n"
        f"üè∑Ô∏è *–ë—Ä–µ–Ω–¥:* {get('company_name')}\n"
        f"üåç *–†–µ–≥–∏–æ–Ω—ã:* {get('region')}\n"
        f"üõí *–ö–∞—Ç–∞–ª–æ–≥:* {get('catalog_size')}\n"
        f"üß± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {get('platform')}\n"
        f"üí≥ *–ü–ª–∞—Ç–µ–∂–∏:* {get('payments')}\n"
        f"üí± *–í–∞–ª—é—Ç—ã:* {get('currencies')}\n"
        f"üöö *–õ–æ–≥–∏—Å—Ç–∏–∫–∞:* {get('shipping')}\n"
        f"üó£Ô∏è *–Ø–∑—ã–∫–∏:* {get('languages')}\n"
        f"üìÖ *–î–µ–¥–ª–∞–π–Ω:* {get('deadline')}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {get('budget_range')}\n\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {get('categories')}\n"
        f"üßµ –ê—Ç—Ä–∏–±—É—Ç—ã/—Ñ–∏–ª—å—Ç—Ä—ã: {get('attributes')}\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞/–ø—Ä–∞–≤–∏–ª–∞: {get('shipping_rules')}\n"
        f"üßæ –ù–∞–ª–æ–≥–∏: {get('taxes')}\n"
        f"‚öñÔ∏è Legal: {get('legal')}\n"
        f"üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {get('marketing')}\n"
        f"üé® –ë—Ä–µ–Ω–¥-–∞—Å—Å–µ—Ç—ã: {get('brand_assets')}\n"
        f"üì∑ –ö–æ–Ω—Ç–µ–Ω—Ç: {get('content')}\n"
        f"üè∑Ô∏è –°–∫–∏–¥–∫–∏: {get('discount_logic')}\n"
        f"üîÅ –í–æ–∑–≤—Ä–∞—Ç—ã: {get('return_policy')}\n"
    )

async def send_to_admin(text: str):
    """–®–ª—ë–º –±—Ä–∏—Ñ –≤ ADMIN_CHAT_ID (–ª–∏—á–∫–∞/–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)."""
    if not ADMIN_CHAT_ID:
        return
    try:
        await TG_APP.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        print(f"send_to_admin error: {e}")

def find_question(qid: str) -> Dict[str, Any]:
    for q in Q["questions"]:
        if q["id"] == qid:
            return q
    raise KeyError(qid)

def question_index(qid: str) -> int:
    for i, q in enumerate(Q["questions"]):
        if q["id"] == qid:
            return i
    return 0

# ========= FLOW =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    SESSIONS[user.id] = {"answers": {}, "q_index": 0, "multi_buffer": {}, "editing": None}
    await update.message.reply_text(
        "üêæ –ü—Ä–∏–≤–µ—Ç! –Ø *BranPole Assistant*. –ü–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å –¢–ó –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.\n"
        "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –∞ –¥–∞–ª—å—à–µ –º—ã –≤—Å—ë —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º. –ü–æ–µ—Ö–∞–ª–∏! üöÄ",
        parse_mode=ParseMode.MARKDOWN
    )
    await ask_next(update, SESSIONS[user.id])

async def setwebhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not PUBLIC_BASE_URL:
        await update.message.reply_text("PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ Variables.")
        return
    ok = await context.bot.set_webhook(f"{PUBLIC_BASE_URL}/telegram/{WEBHOOK_SECRET}")
    await update.message.reply_text(f"Webhook set: {ok} ‚Üí {PUBLIC_BASE_URL}/telegram/{WEBHOOK_SECRET}")

def current_question(sess):
    idx = sess["q_index"]
    if idx >= len(Q["questions"]):
        return None
    return Q["questions"][idx]

async def show_summary(target, sess: Dict[str, Any]):
    # –°–≤–æ–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –∫–Ω–æ–ø–∫–∏ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å X¬ª –∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
    summary = format_summary_user(sess)
    if hasattr(target, "edit_message_text"):
        await target.edit_message_text(summary, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_confirm_and_edit(sess))
    else:
        await target.message.reply_text(summary, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_confirm_and_edit(sess))

async def ask_next(target, sess: Dict[str, Any]):
    q = current_question(sess)
    if not q:
        await show_summary(target, sess)
        return
    if "options" in q:
        markup = kb_options(q["options"], q.get("multi", False), q["id"])
        if hasattr(target, "edit_message_text"):
            await target.edit_message_text(q["text"], reply_markup=markup)
        else:
            await target.message.reply_text(q["text"], reply_markup=markup)
    else:
        if hasattr(target, "edit_message_text"):
            await target.edit_message_text(q["text"])
        else:
            await target.message.reply_text(q["text"])

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    sess = SESSIONS.setdefault(uid, {"answers": {}, "q_index": 0, "multi_buffer": {}, "editing": None})
    data = query.data

    # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if data.startswith("edit:"):
        _, qid = data.split(":")
        sess["editing"] = qid
        sess["q_index"] = question_index(qid)
        sess["multi_buffer"] = {}  # —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è multi
        await ask_next(query, sess)
        return

    if data.startswith("opt:"):
        _, qid, idx = data.split(":")
        q = find_question(qid)
        opt = q["options"][int(idx)]
        if q.get("multi"):
            selected = sess["multi_buffer"].setdefault(qid, set())
            if opt in selected: selected.remove(opt)
            else: selected.add(opt)
            await query.edit_message_reply_markup(reply_markup=kb_options(q["options"], True, qid))
        else:
            sess["answers"][qid] = opt
            if sess.get("editing"):
                # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ‚Äî —Å—Ä–∞–∑—É –∫ —Å–≤–æ–¥–∫–µ
                sess["editing"] = None
                await show_summary(query, sess)
            else:
                sess["q_index"] += 1
                await ask_next(query, sess)
        return

    if data.startswith("next:"):
        _, qid = data.split(":")
        sess["answers"][qid] = list(sess["multi_buffer"].get(qid, []))
        if sess.get("editing"):
            sess["editing"] = None
            await show_summary(query, sess)
        else:
            sess["q_index"] += 1
            await ask_next(query, sess)
        return

    if data == "confirm:reset":
        sess["answers"] = {}
        sess["q_index"] = 0
        sess["multi_buffer"] = {}
        sess["editing"] = None
        await ask_next(query, sess)
        return

    if data == "confirm:yes":
        # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Üí —à–ª—ë–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –±—Ä–∏—Ñ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª/—á–∞—Ç
        admin_text = format_summary_admin(sess)
        await send_to_admin(admin_text)

        await query.edit_message_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ ‚Äî –º—ã –ø–æ–ª—É—á–∏–ª–∏ –¢–ó. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üôå"
        )
        return

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    sess = SESSIONS.setdefault(uid, {"answers": {}, "q_index": 0, "multi_buffer": {}, "editing": None})
    q = current_question(sess)
    if not q:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")
        return
    sess["answers"][q["id"]] = update.message.text.strip()

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É, –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if sess.get("editing"):
        sess["editing"] = None
        await show_summary(update, sess)
    else:
        sess["q_index"] += 1
        await ask_next(update, sess)
