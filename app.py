import os, json, yaml
from typing import Dict, Any, Optional, List

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, PlainTextResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)
import httpx

# ========= ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN")                      # —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")          # https://xxx.up.railway.app
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "hook")    # –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")              # ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å -100...)

# –ì–æ—Ä—è—á–∏–π –ª–∏–¥: —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª + –≤ Zoho (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
AUTO_ZOHO = os.getenv("AUTO_ZOHO", "true").lower() == "true"

# Zoho CRM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
ZOHO_ACCESS_TOKEN = os.getenv("ZOHO_ACCESS_TOKEN")      # OAuth —Ç–æ–∫–µ–Ω
ZOHO_DC = os.getenv("ZOHO_DC", "eu")                    # eu | com | in | au
ZOHO_MODULE = os.getenv("ZOHO_MODULE", "Leads")         # –æ–±—ã—á–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π

# ========= LOAD QUESTIONS (ONLY ECOMMERCE) =========
with open("questions.yaml", "r", encoding="utf-8") as f:
    Q = yaml.safe_load(f)["ecommerce"]

# ========= STATE (in-memory) =========
SESSIONS: Dict[int, Dict[str, Any]] = {}

# ========= FASTAPI =========
app = FastAPI()
TG_APP = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ BOT_TOKEN –≤–∞–ª–∏–¥–µ–Ω

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/")
def root():
    return PlainTextResponse("E-commerce TZ Bot is running.")

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∞—Ä—Ç: –Ω–µ –≤–∞–ª–∏–º —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω/–±–∏—Ç—ã–π
@app.on_event("startup")
async def startup():
    global TG_APP
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("WARNING: BOT_TOKEN is not set. Telegram handlers NOT initialized yet.")
        TG_APP = None
        return
    try:
        TG_APP = ApplicationBuilder().token(token).build()
        TG_APP.add_handler(CommandHandler("start", start))
        TG_APP.add_handler(CommandHandler("setwebhook", setwebhook))
        TG_APP.add_handler(CallbackQueryHandler(on_callback))
        TG_APP.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
        await TG_APP.initialize()
        print("Telegram app initialized.")
    except Exception as e:
        print(f"ERROR: Telegram init failed: {e}")
        TG_APP = None  # –¥–∞—ë–º FastAPI –ø–æ–¥–Ω—è—Ç—å—Å—è, healthcheck –ø—Ä–æ–π–¥—ë—Ç

@app.post(f"/telegram/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º 500, –∞ –æ—Ç–¥–∞—ë–º 503
    if TG_APP is None:
        return JSONResponse({"ok": False, "error": "Bot not initialized"}, status_code=503)
    data = await request.json()
    update = Update.de_json(data, TG_APP.bot)
    await TG_APP.process_update(update)
    return JSONResponse({"ok": True})

# ========= HELPERS =========
def kb_options(options: List[str], multi: bool, qid: str):
    rows, row = [], []
    for i, opt in enumerate(options):
        row.append(InlineKeyboardButton(opt, callback_data=f"opt:{qid}:{i}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    if multi:
        rows.append([InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"next:{qid}")])
    return InlineKeyboardMarkup(rows)

def kb_confirm():
    return InlineKeyboardMarkup([[  # –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes"),
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm:edit")
    ]])

def format_summary(data: Dict[str, Any]) -> str:
    lines = [f"*–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:* {Q['title']}"]
    for q in Q["questions"]:
        qid = q["id"]
        val = data["answers"].get(qid)
        if val is None: continue
        if isinstance(val, list):
            val = ", ".join(map(str, val))
        lines.append(f"*{q['text']}* ‚Äî {val}")
    return "\n".join(lines)

async def send_to_admin(text: str):
    """–®–ª—ë–º –±—Ä–∏—Ñ –≤ ADMIN_CHAT_ID (–ª–∏—á–∫–∞/–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)."""
    if not ADMIN_CHAT_ID:
        return
    try:
        await TG_APP.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        print(f"send_to_admin error: {e}")

async def create_zoho_lead(data: Dict[str, Any], summary_md: str) -> Optional[dict]:
    """–°–æ–∑–¥–∞—ë—Ç –ª–∏–¥ –≤ Zoho, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç Zoho."""
    if not ZOHO_ACCESS_TOKEN:
        return None
    base = f"https://www.zohoapis.{ZOHO_DC}/crm/v2/{ZOHO_MODULE}"
    record = {
        # –ø–æ–¥—Å—Ç–∞–≤—å –ø–æ–¥ —Å–≤–æ–∏ –ø–æ–ª—è –≤ Zoho:
        "Company": data["answers"].get("company_name") or "N/A",
        "Last_Name": data["answers"].get("company_name") or "Client",
        "Lead_Source": "Telegram Bot",
        "Description": summary_md,  # –≤—Å—è —Å–≤–æ–¥–∫–∞ –≤ Description –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    }
    headers = {"Authorization": f"Zoho-oauthtoken {ZOHO_ACCESS_TOKEN}"}
    payload = {"data": [record], "trigger": ["workflow"]}
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            r = await client.post(base, headers=headers, json=payload)
            return r.json()
    except Exception as e:
        print(f"create_zoho_lead error: {e}")
        return {"error": str(e)}

# ========= FLOW =========
async def start(update, context):
    user = update.effective_user
    SESSIONS[user.id] = {"answers": {}, "q_index": 0, "multi_buffer": {}}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –°–æ—Å—Ç–∞–≤–∏–º –¢–ó –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.")
    await ask_next(update, SESSIONS[user.id])

async def setwebhook(update, context):
    if not PUBLIC_BASE_URL:
        await update.message.reply_text("PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ Variables.")
        return
    ok = await context.bot.set_webhook(f"{PUBLIC_BASE_URL}/telegram/{WEBHOOK_SECRET}")
    await update.message.reply_text(f"Webhook set: {ok} ‚Üí {PUBLIC_BASE_URL}/telegram/{WEBHOOK_SECRET}")

def current_question(sess):
    idx = sess["q_index"]
    if idx >= len(Q["questions"]):
        return None
    return Q["questions"][idx]

async def ask_next(target, sess):
    q = current_question(sess)
    if not q:
        summary = format_summary(sess)
        text = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n" + summary
        if hasattr(target, "edit_message_text"):
            await target.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_confirm())
        else:
            await target.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_confirm())
        return
    if "options" in q:
        markup = kb_options(q["options"], q.get("multi", False), q["id"])
        if hasattr(target, "edit_message_text"):
            await target.edit_message_text(q["text"], reply_markup=markup)
        else:
            await target.message.reply_text(q["text"], reply_markup=markup)
    else:
        if hasattr(target, "edit_message_text"):
            await target.edit_message_text(q["text"])
        else:
            await target.message.reply_text(q["text"])

async def on_callback(update, context):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    sess = SESSIONS.setdefault(uid, {"answers": {}, "q_index": 0, "multi_buffer": {}})
    data = query.data

    if data.startswith("opt:"):
        _, qid, idx = data.split(":")
        q = next(x for x in Q["questions"] if x["id"] == qid)
        opt = q["options"][int(idx)]
        if q.get("multi"):
            selected = sess["multi_buffer"].setdefault(qid, set())
            if opt in selected: selected.remove(opt)
            else: selected.add(opt)
            await query.edit_message_reply_markup(reply_markup=kb_options(q["options"], True, qid))
        else:
            sess["answers"][qid] = opt
            sess["q_index"] += 1
            await ask_next(query, sess)
        return

    if data.startswith("next:"):
        _, qid = data.split(":")
        sess["answers"][qid] = list(sess["multi_buffer"].get(qid, []))
        sess["q_index"] += 1
        await ask_next(query, sess)
        return

    if data == "confirm:yes":
        # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Üí –≥–æ—Ä—è—á–∏–π –ª–∏–¥: —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª + Zoho
        summary = format_summary(sess)

        # 1) –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª/—á–∞—Ç
        await send_to_admin("üÜï *–ù–æ–≤—ã–π e-commerce –±—Ä–∏—Ñ:*\n\n" + summary)

        # 2) –≤ Zoho (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ / –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
        zoho_msg = ""
        if AUTO_ZOHO:
            res = await create_zoho_lead(sess, summary)
            if res is not None:
                try:
                    details = res["data"][0]["details"]
                    zoho_id = details.get("id")
                    zoho_msg = f"\n\n‚úÖ Zoho Lead —Å–æ–∑–¥–∞–Ω: `{zoho_id}`"
                except Exception:
                    zoho_msg = f"\n\n‚ö†Ô∏è Zoho –æ—Ç–≤–µ—Ç: `{json.dumps(res, ensure_ascii=False)}`"

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! ‚úÖ –¢–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        # –ò –¥–æ–ø. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (–≤ —Ç–æ–º –∂–µ –∞–¥–º–∏–Ω-—á–∞—Ç–µ)
        if zoho_msg:
            await send_to_admin(zoho_msg)
        return

    if data == "confirm:edit":
        sess["answers"] = {}
        sess["q_index"] = 0
        sess["multi_buffer"] = {}
        await ask_next(query, sess)
        return

async def on_text(update, context):
    uid = update.effective_user.id
    sess = SESSIONS.setdefault(uid, {"answers": {}, "q_index": 0, "multi_buffer": {}})
    q = current_question(sess)
    if not q:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¢–ó –≤—ã—à–µ.")
        return
    sess["answers"][q["id"]] = update.message.text.strip()
    sess["q_index"] += 1
    await ask_next(update, sess)
